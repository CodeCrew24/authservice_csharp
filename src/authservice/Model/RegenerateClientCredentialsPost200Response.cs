/*
 * Auth Service
 *
 * This API provides token-based authentication for user registration, login, and client credential management. It ensures secure communication by utilizing tokens for authentication. Users can register with unique usernames and passwords, authenticate using client credentials, retrieve client IDs and secrets, and regenerate client credentials as needed. The API supports various user roles, including 'user', 'admin', 'moderator', 'guest', and 'superadmin'.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = authservice.Client.FileParameter;
using OpenAPIDateConverter = authservice.Client.OpenAPIDateConverter;

namespace authservice.Model
{
    /// <summary>
    /// RegenerateClientCredentialsPost200Response
    /// </summary>
    [DataContract(Name = "_regenerate_client_credentials_post_200_response")]
    public partial class RegenerateClientCredentialsPost200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegenerateClientCredentialsPost200Response" /> class.
        /// </summary>
        /// <param name="message">Success message.</param>
        /// <param name="clientId">New client ID.</param>
        /// <param name="clientSecret">New client secret.</param>
        public RegenerateClientCredentialsPost200Response(string message = default(string), string clientId = default(string), string clientSecret = default(string))
        {
            this.Message = message;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
        }

        /// <summary>
        /// Success message
        /// </summary>
        /// <value>Success message</value>
        /// <example>Client credentials regenerated successfully</example>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// New client ID
        /// </summary>
        /// <value>New client ID</value>
        /// <example>xyz789-abc456</example>
        [DataMember(Name = "clientId", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// New client secret
        /// </summary>
        /// <value>New client secret</value>
        /// <example>ghi012-def789</example>
        [DataMember(Name = "clientSecret", EmitDefaultValue = false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegenerateClientCredentialsPost200Response {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
