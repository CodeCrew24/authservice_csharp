/*
 * Auth Service
 *
 * This API provides token-based authentication for user registration, login, and client credential management. It ensures secure communication by utilizing tokens for authentication. Users can register with unique usernames and passwords, authenticate using client credentials, retrieve client IDs and secrets, and regenerate client credentials as needed. The API supports various user roles, including 'user', 'admin', 'moderator', 'guest', and 'superadmin'. Token is valid for 12hrs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using authservice.Client;
using authservice.Model;

namespace authservice.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get client ID and secret
        /// </summary>
        /// <remarks>
        /// Returns the client ID and client secret of the user associated with the provided username and password.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <returns>ClientGet200Response</returns>
        ClientGet200Response ClientGet(string username, string password);

        /// <summary>
        /// Get client ID and secret
        /// </summary>
        /// <remarks>
        /// Returns the client ID and client secret of the user associated with the provided username and password.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <returns>ApiResponse of ClientGet200Response</returns>
        ApiResponse<ClientGet200Response> ClientGetWithHttpInfo(string username, string password);
        /// <summary>
        /// Logs in a user using client ID and secret
        /// </summary>
        /// <remarks>
        /// Authenticates a user with the provided client ID and secret. Returns a JWT token, token type (Bearer), and expiry time in seconds.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">User&#39;s client ID</param>
        /// <param name="clientSecret">User&#39;s client secret</param>
        /// <returns>LoginClientPost200Response</returns>
        LoginClientPost200Response LoginClientPost(string clientId, string clientSecret);

        /// <summary>
        /// Logs in a user using client ID and secret
        /// </summary>
        /// <remarks>
        /// Authenticates a user with the provided client ID and secret. Returns a JWT token, token type (Bearer), and expiry time in seconds.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">User&#39;s client ID</param>
        /// <param name="clientSecret">User&#39;s client secret</param>
        /// <returns>ApiResponse of LoginClientPost200Response</returns>
        ApiResponse<LoginClientPost200Response> LoginClientPostWithHttpInfo(string clientId, string clientSecret);
        /// <summary>
        /// Regenerate client credentials
        /// </summary>
        /// <remarks>
        /// Regenerates the client ID and client secret of the user associated with the provided username and password. Returns the new client ID and client secret in the response.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <returns>RegenerateClientCredentialsPost200Response</returns>
        RegenerateClientCredentialsPost200Response RegenerateClientCredentialsPost(string username, string password);

        /// <summary>
        /// Regenerate client credentials
        /// </summary>
        /// <remarks>
        /// Regenerates the client ID and client secret of the user associated with the provided username and password. Returns the new client ID and client secret in the response.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <returns>ApiResponse of RegenerateClientCredentialsPost200Response</returns>
        ApiResponse<RegenerateClientCredentialsPost200Response> RegenerateClientCredentialsPostWithHttpInfo(string username, string password);
        /// <summary>
        /// Registers a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user with the provided username, password, and role. Returns the generated client ID and client secret in the response.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Unique username for the user</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="role"></param>
        /// <returns>RegisterPost201Response</returns>
        RegisterPost201Response RegisterPost(string username, string password, string role);

        /// <summary>
        /// Registers a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user with the provided username, password, and role. Returns the generated client ID and client secret in the response.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Unique username for the user</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="role"></param>
        /// <returns>ApiResponse of RegisterPost201Response</returns>
        ApiResponse<RegisterPost201Response> RegisterPostWithHttpInfo(string username, string password, string role);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get client ID and secret
        /// </summary>
        /// <remarks>
        /// Returns the client ID and client secret of the user associated with the provided username and password.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientGet200Response</returns>
        System.Threading.Tasks.Task<ClientGet200Response> ClientGetAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get client ID and secret
        /// </summary>
        /// <remarks>
        /// Returns the client ID and client secret of the user associated with the provided username and password.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientGet200Response>> ClientGetWithHttpInfoAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Logs in a user using client ID and secret
        /// </summary>
        /// <remarks>
        /// Authenticates a user with the provided client ID and secret. Returns a JWT token, token type (Bearer), and expiry time in seconds.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">User&#39;s client ID</param>
        /// <param name="clientSecret">User&#39;s client secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginClientPost200Response</returns>
        System.Threading.Tasks.Task<LoginClientPost200Response> LoginClientPostAsync(string clientId, string clientSecret, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logs in a user using client ID and secret
        /// </summary>
        /// <remarks>
        /// Authenticates a user with the provided client ID and secret. Returns a JWT token, token type (Bearer), and expiry time in seconds.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">User&#39;s client ID</param>
        /// <param name="clientSecret">User&#39;s client secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginClientPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginClientPost200Response>> LoginClientPostWithHttpInfoAsync(string clientId, string clientSecret, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Regenerate client credentials
        /// </summary>
        /// <remarks>
        /// Regenerates the client ID and client secret of the user associated with the provided username and password. Returns the new client ID and client secret in the response.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegenerateClientCredentialsPost200Response</returns>
        System.Threading.Tasks.Task<RegenerateClientCredentialsPost200Response> RegenerateClientCredentialsPostAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Regenerate client credentials
        /// </summary>
        /// <remarks>
        /// Regenerates the client ID and client secret of the user associated with the provided username and password. Returns the new client ID and client secret in the response.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegenerateClientCredentialsPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegenerateClientCredentialsPost200Response>> RegenerateClientCredentialsPostWithHttpInfoAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Registers a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user with the provided username, password, and role. Returns the generated client ID and client secret in the response.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Unique username for the user</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="role"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterPost201Response</returns>
        System.Threading.Tasks.Task<RegisterPost201Response> RegisterPostAsync(string username, string password, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Registers a new user
        /// </summary>
        /// <remarks>
        /// Creates a new user with the provided username, password, and role. Returns the generated client ID and client secret in the response.
        /// </remarks>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Unique username for the user</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="role"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterPost201Response>> RegisterPostWithHttpInfoAsync(string username, string password, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDisposable, IDefaultApi
    {
        private authservice.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = authservice.Client.Configuration.MergeConfigurations(
                authservice.Client.GlobalConfiguration.Instance,
                new authservice.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new authservice.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = authservice.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DefaultApi(authservice.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = authservice.Client.Configuration.MergeConfigurations(
                authservice.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new authservice.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = authservice.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DefaultApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DefaultApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = authservice.Client.Configuration.MergeConfigurations(
                authservice.Client.GlobalConfiguration.Instance,
                new authservice.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new authservice.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = authservice.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DefaultApi(HttpClient client, authservice.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = authservice.Client.Configuration.MergeConfigurations(
                authservice.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new authservice.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = authservice.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DefaultApi(authservice.Client.ISynchronousClient client, authservice.Client.IAsynchronousClient asyncClient, authservice.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = authservice.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public authservice.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public authservice.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public authservice.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public authservice.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public authservice.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get client ID and secret Returns the client ID and client secret of the user associated with the provided username and password.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <returns>ClientGet200Response</returns>
        public ClientGet200Response ClientGet(string username, string password)
        {
            authservice.Client.ApiResponse<ClientGet200Response> localVarResponse = ClientGetWithHttpInfo(username, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client ID and secret Returns the client ID and client secret of the user associated with the provided username and password.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <returns>ApiResponse of ClientGet200Response</returns>
        public authservice.Client.ApiResponse<ClientGet200Response> ClientGetWithHttpInfo(string username, string password)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'username' when calling DefaultApi->ClientGet");

            // verify the required parameter 'password' is set
            if (password == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'password' when calling DefaultApi->ClientGet");

            authservice.Client.RequestOptions localVarRequestOptions = new authservice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authservice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = authservice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("username", authservice.Client.ClientUtils.ParameterToString(username)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("password", authservice.Client.ClientUtils.ParameterToString(password)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientGet200Response>("/client", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get client ID and secret Returns the client ID and client secret of the user associated with the provided username and password.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientGet200Response</returns>
        public async System.Threading.Tasks.Task<ClientGet200Response> ClientGetAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authservice.Client.ApiResponse<ClientGet200Response> localVarResponse = await ClientGetWithHttpInfoAsync(username, password, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get client ID and secret Returns the client ID and client secret of the user associated with the provided username and password.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientGet200Response)</returns>
        public async System.Threading.Tasks.Task<authservice.Client.ApiResponse<ClientGet200Response>> ClientGetWithHttpInfoAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'username' when calling DefaultApi->ClientGet");

            // verify the required parameter 'password' is set
            if (password == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'password' when calling DefaultApi->ClientGet");


            authservice.Client.RequestOptions localVarRequestOptions = new authservice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = authservice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = authservice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("username", authservice.Client.ClientUtils.ParameterToString(username)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("password", authservice.Client.ClientUtils.ParameterToString(password)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientGet200Response>("/client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClientGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs in a user using client ID and secret Authenticates a user with the provided client ID and secret. Returns a JWT token, token type (Bearer), and expiry time in seconds.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">User&#39;s client ID</param>
        /// <param name="clientSecret">User&#39;s client secret</param>
        /// <returns>LoginClientPost200Response</returns>
        public LoginClientPost200Response LoginClientPost(string clientId, string clientSecret)
        {
            authservice.Client.ApiResponse<LoginClientPost200Response> localVarResponse = LoginClientPostWithHttpInfo(clientId, clientSecret);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs in a user using client ID and secret Authenticates a user with the provided client ID and secret. Returns a JWT token, token type (Bearer), and expiry time in seconds.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">User&#39;s client ID</param>
        /// <param name="clientSecret">User&#39;s client secret</param>
        /// <returns>ApiResponse of LoginClientPost200Response</returns>
        public authservice.Client.ApiResponse<LoginClientPost200Response> LoginClientPostWithHttpInfo(string clientId, string clientSecret)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->LoginClientPost");

            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'clientSecret' when calling DefaultApi->LoginClientPost");

            authservice.Client.RequestOptions localVarRequestOptions = new authservice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authservice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = authservice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("clientId", authservice.Client.ClientUtils.ParameterToString(clientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("clientSecret", authservice.Client.ClientUtils.ParameterToString(clientSecret)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<LoginClientPost200Response>("/login/client", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginClientPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs in a user using client ID and secret Authenticates a user with the provided client ID and secret. Returns a JWT token, token type (Bearer), and expiry time in seconds.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">User&#39;s client ID</param>
        /// <param name="clientSecret">User&#39;s client secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginClientPost200Response</returns>
        public async System.Threading.Tasks.Task<LoginClientPost200Response> LoginClientPostAsync(string clientId, string clientSecret, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authservice.Client.ApiResponse<LoginClientPost200Response> localVarResponse = await LoginClientPostWithHttpInfoAsync(clientId, clientSecret, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs in a user using client ID and secret Authenticates a user with the provided client ID and secret. Returns a JWT token, token type (Bearer), and expiry time in seconds.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">User&#39;s client ID</param>
        /// <param name="clientSecret">User&#39;s client secret</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginClientPost200Response)</returns>
        public async System.Threading.Tasks.Task<authservice.Client.ApiResponse<LoginClientPost200Response>> LoginClientPostWithHttpInfoAsync(string clientId, string clientSecret, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->LoginClientPost");

            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'clientSecret' when calling DefaultApi->LoginClientPost");


            authservice.Client.RequestOptions localVarRequestOptions = new authservice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = authservice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = authservice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("clientId", authservice.Client.ClientUtils.ParameterToString(clientId)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("clientSecret", authservice.Client.ClientUtils.ParameterToString(clientSecret)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<LoginClientPost200Response>("/login/client", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginClientPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Regenerate client credentials Regenerates the client ID and client secret of the user associated with the provided username and password. Returns the new client ID and client secret in the response.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <returns>RegenerateClientCredentialsPost200Response</returns>
        public RegenerateClientCredentialsPost200Response RegenerateClientCredentialsPost(string username, string password)
        {
            authservice.Client.ApiResponse<RegenerateClientCredentialsPost200Response> localVarResponse = RegenerateClientCredentialsPostWithHttpInfo(username, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate client credentials Regenerates the client ID and client secret of the user associated with the provided username and password. Returns the new client ID and client secret in the response.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <returns>ApiResponse of RegenerateClientCredentialsPost200Response</returns>
        public authservice.Client.ApiResponse<RegenerateClientCredentialsPost200Response> RegenerateClientCredentialsPostWithHttpInfo(string username, string password)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'username' when calling DefaultApi->RegenerateClientCredentialsPost");

            // verify the required parameter 'password' is set
            if (password == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'password' when calling DefaultApi->RegenerateClientCredentialsPost");

            authservice.Client.RequestOptions localVarRequestOptions = new authservice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authservice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = authservice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("username", authservice.Client.ClientUtils.ParameterToString(username)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("password", authservice.Client.ClientUtils.ParameterToString(password)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<RegenerateClientCredentialsPost200Response>("/regenerate-client-credentials", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegenerateClientCredentialsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Regenerate client credentials Regenerates the client ID and client secret of the user associated with the provided username and password. Returns the new client ID and client secret in the response.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegenerateClientCredentialsPost200Response</returns>
        public async System.Threading.Tasks.Task<RegenerateClientCredentialsPost200Response> RegenerateClientCredentialsPostAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authservice.Client.ApiResponse<RegenerateClientCredentialsPost200Response> localVarResponse = await RegenerateClientCredentialsPostWithHttpInfoAsync(username, password, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate client credentials Regenerates the client ID and client secret of the user associated with the provided username and password. Returns the new client ID and client secret in the response.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User&#39;s username</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegenerateClientCredentialsPost200Response)</returns>
        public async System.Threading.Tasks.Task<authservice.Client.ApiResponse<RegenerateClientCredentialsPost200Response>> RegenerateClientCredentialsPostWithHttpInfoAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'username' when calling DefaultApi->RegenerateClientCredentialsPost");

            // verify the required parameter 'password' is set
            if (password == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'password' when calling DefaultApi->RegenerateClientCredentialsPost");


            authservice.Client.RequestOptions localVarRequestOptions = new authservice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = authservice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = authservice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("username", authservice.Client.ClientUtils.ParameterToString(username)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("password", authservice.Client.ClientUtils.ParameterToString(password)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RegenerateClientCredentialsPost200Response>("/regenerate-client-credentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegenerateClientCredentialsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Registers a new user Creates a new user with the provided username, password, and role. Returns the generated client ID and client secret in the response.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Unique username for the user</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="role"></param>
        /// <returns>RegisterPost201Response</returns>
        public RegisterPost201Response RegisterPost(string username, string password, string role)
        {
            authservice.Client.ApiResponse<RegisterPost201Response> localVarResponse = RegisterPostWithHttpInfo(username, password, role);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Registers a new user Creates a new user with the provided username, password, and role. Returns the generated client ID and client secret in the response.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Unique username for the user</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="role"></param>
        /// <returns>ApiResponse of RegisterPost201Response</returns>
        public authservice.Client.ApiResponse<RegisterPost201Response> RegisterPostWithHttpInfo(string username, string password, string role)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'username' when calling DefaultApi->RegisterPost");

            // verify the required parameter 'password' is set
            if (password == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'password' when calling DefaultApi->RegisterPost");

            // verify the required parameter 'role' is set
            if (role == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'role' when calling DefaultApi->RegisterPost");

            authservice.Client.RequestOptions localVarRequestOptions = new authservice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authservice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = authservice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("username", authservice.Client.ClientUtils.ParameterToString(username)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("password", authservice.Client.ClientUtils.ParameterToString(password)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("role", authservice.Client.ClientUtils.ParameterToString(role)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<RegisterPost201Response>("/register", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Registers a new user Creates a new user with the provided username, password, and role. Returns the generated client ID and client secret in the response.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Unique username for the user</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="role"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterPost201Response</returns>
        public async System.Threading.Tasks.Task<RegisterPost201Response> RegisterPostAsync(string username, string password, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authservice.Client.ApiResponse<RegisterPost201Response> localVarResponse = await RegisterPostWithHttpInfoAsync(username, password, role, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Registers a new user Creates a new user with the provided username, password, and role. Returns the generated client ID and client secret in the response.
        /// </summary>
        /// <exception cref="authservice.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Unique username for the user</param>
        /// <param name="password">User&#39;s password</param>
        /// <param name="role"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterPost201Response)</returns>
        public async System.Threading.Tasks.Task<authservice.Client.ApiResponse<RegisterPost201Response>> RegisterPostWithHttpInfoAsync(string username, string password, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'username' when calling DefaultApi->RegisterPost");

            // verify the required parameter 'password' is set
            if (password == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'password' when calling DefaultApi->RegisterPost");

            // verify the required parameter 'role' is set
            if (role == null)
                throw new authservice.Client.ApiException(400, "Missing required parameter 'role' when calling DefaultApi->RegisterPost");


            authservice.Client.RequestOptions localVarRequestOptions = new authservice.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = authservice.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = authservice.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("username", authservice.Client.ClientUtils.ParameterToString(username)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("password", authservice.Client.ClientUtils.ParameterToString(password)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("role", authservice.Client.ClientUtils.ParameterToString(role)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RegisterPost201Response>("/register", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
